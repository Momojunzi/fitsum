{"version":3,"sources":["components/landing/landing.js","components/navbar/navbar.js","components/router/router.js","App.js","serviceWorker.js","index.js"],"names":["Landing","styles","StyleSheet","create","landing","fontFamily","width","height","display","gridTemplateRows","backgroundImage","backgroundPosition","backgroundRepeat","backgroundSize","landingContent","gridRowStart","landingTitleDiv","fontWeight","fontSize","alignContent","justifyContent","paddingLeft","paddingTop","className","css","NavBar","useState","navMargin","setNavMargin","navIcon","setNavIcon","hbBackground","setHbBackground","navBar","position","zIndex","gridTemplateColumns","color","navDiv","marginTop","marginBottom","marginLeft","backgroundColor","transition","gridColumnStart","textAlign","link","borderBottom","hamburgerDiv","Navbar","to","onClick","AppRouter","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.27805231.chunk.js","sourcesContent":["import React from 'react';\nimport { StyleSheet, css } from 'aphrodite';\n\nconst Landing = () => {\n  const styles = StyleSheet.create({\n    landing: {\n      fontFamily: '\"Chivo\", sans-serif',\n      width: '100vw',\n      height: '100vh',\n      display: 'grid',\n      gridTemplateRows: '5vh 95vh',\n      backgroundImage: 'url(\"https://res.cloudinary.com/momojunzi/image/upload/v1567824010/FitsumImages/I_1505_by_Ftsum_Gebray21-03-1984_2.jpg\")',\n      backgroundPosition: 'center',\n      backgroundRepeat: 'no-repeat',\n      backgroundSize: 'cover'\n    },\n    landingContent: {\n      gridRowStart: '2',\n      display: 'grid',\n      gridTemplateRows: '33.3% 33.3% 33.3%'\n    },\n    landingTitleDiv: {\n      fontWeight: 'bold',\n      fontSize: '3.5em',\n      gridRowStart: '1',\n      display: 'grid',\n      alignContent: 'center',\n      justifyContent: 'start',\n      paddingLeft: '5vw',\n      '@media (max-width: 767px)': {\n        fontSize: '1.65em',\n        justifyContent: 'center',\n        alignContent: 'start',\n        paddingTop: '15%',\n        paddingLeft: '0'\n      }\n    }\n  });\n\n  return (\n    <div className={css(styles.landing)}>\n      <div className={css(styles.landingContent)}>\n        <div className={css(styles.landingTitleDiv)}>\n          Eritrea Through the Lense\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Landing;\n","import React, { useState } from 'react';\nimport { Navbar } from 'react-bootstrap';\nimport { StyleSheet, css } from 'aphrodite';\nimport { Link } from 'react-router-dom';\n\nconst NavBar = () => {\n  const [navMargin, setNavMargin] = useState('-41vh');\n  const [navIcon, setNavIcon] = useState('menu');\n  const [hbBackground, setHbBackground] = useState('rgba(255,255,255,0.0)');\n\n  const styles = StyleSheet.create({\n    navBar: {\n      position: 'absolute',\n      zIndex: '100',\n      display: 'grid',\n      gridTemplateColumns: '33.3vw 33.3vw 33.3vw',\n      color: 'white',\n      alignContent: 'center',\n      paddingLeft: '0'\n    },\n    navDiv: {\n      '@media (max-width: 767px)': {\n        display: 'grid',\n        gridTemplateRows: '10vh 10vh 10vh 10vh 5vh',\n        width: '100vw',\n        height: '45vh',\n        marginTop: navMargin,\n        marginBottom: '0',\n        marginLeft: '0',\n        paddingTop: '0',\n        backgroundColor: hbBackground,\n        transition: 'margin 0.75s, background-color 0.75s'\n      },\n      '@media (min-width: 768px)': {\n        display: 'grid',\n        gridTemplateColumns: '25% 25% 25% 25%',\n        gridColumnStart: '2',\n        textAlign: 'start'\n      }\n    },\n    link: {\n      fontFamily: '\"Comfortaa\", cursive',\n      fontWeight: 'bold',\n      fontSize: '1.25em',\n      display: 'grid',\n      alignContent: 'center',\n      color: 'black',\n      '@media (max-width: 767px)': {\n        borderBottom: 'solid black 1px'\n      }\n    },\n    hamburgerDiv: {\n      '@media (max-width: 767px)': {\n        display: 'grid',\n        color: 'black',\n        backgroundColor: hbBackground,\n        transition: 'background-color 0.75s'\n      },\n      '@media (min-width: 768px)': {\n        display: 'none'\n      }\n    },\n    navIcon: {\n      paddingTop: '5px'\n    }\n  });\n\n  const clickHamburger = () => {\n    if (navMargin !== '-2vh') {\n      setNavMargin('-2vh');\n      setNavIcon('close');\n      setHbBackground('rgba(255,255,255,0.9)');\n    } else {\n      setNavMargin('-41vh');\n      setNavIcon('menu');\n      setHbBackground('rgba(255,255,255,0.0)');\n    }\n  };\n\n  return (\n    <Navbar className={css(styles.navBar)} >\n      <div className={css(styles.navDiv)}>\n        <Link to='#features' className={css(styles.link)} >Galleries</Link>\n        <Link to='#videos' className={css(styles.link)} >Videos</Link>\n        <Link to='#history' className={css(styles.link)} >History</Link>\n        <Link to='#bio' className={css(styles.link)} >Biography</Link>\n        <div onClick={clickHamburger} className={css(styles.link, styles.hamburgerDiv)}>\n          <div className={css(styles.navIcon)}>\n            <i className='material-icons'>{navIcon}</i>\n          </div>\n        </div>\n      </div>\n    </Navbar>\n  );\n};\n\nexport default NavBar;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Landing from '../landing/landing';\nimport NavBar from '../navbar/navbar';\n\nconst AppRouter = () => {\n  return (\n    <Router >\n      <NavBar />\n      <Switch >\n        <Route exact path='/' component={Landing} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default AppRouter;\n","import React from 'react';\nimport AppRouter from './components/router/router';\n\nimport './App.css';\n\nfunction App () {\n  return (\n    <div className='App'>\n      <AppRouter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}